Loops:

Loops execute a block of code repeatedly for a specified number of iterations or until a condition is met.

Types of Loops

1. For Loop

Syntax:

for (initialization; condition; increment/decrement) {
  // code to execute
}

Example:

for (let i = 0; i < 5; i++) {
  console.log(i);
}

Output: 0, 1, 2, 3, 4

2. While Loop

Syntax:

while (condition) {
  // code to execute
  increment/decrement;
}

Example:

let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}

Output: 0, 1, 2, 3, 4

3. Do-While Loop

Syntax:

do {
  // code to execute
  increment/decrement;
} while (condition);

Example:

let i = 0;
do {
  console.log(i);
  i++;
} while (i < 5);

Output: 0, 1, 2, 3, 4

4. For-In Loop (Object Iteration)

Syntax:

for (property in object) {
  // code to execute
}

Example:

let person = { name: "John", age: 30, city: "New York" };
for (let property in person) {
  console.log(`${property}: ${person}`);
}

Output:

name: John
age: 30
city: New York


5. For-Of Loop (Array Iteration)

Syntax:

for (element of array) {
  // code to execute
}

Example:

let fruits = ;
for (let fruit of fruits) {
  console.log(fruit);
}

Output:

Apple
Banana
Cherry


Loop Control Statements

1. Break: Exits loop immediately.
2. Continue: Skips current iteration, moves to next.
3. Return: Exits loop and function.

Why Loops?

1. Efficiency: Reduces code duplication.
2. Automation: Performs repetitive tasks.
3. Dynamic behavior: Responds to user input or data changes.
4. Algorithm implementation: Essential for sorting, searching, and more.

Best Practices:

1. Use meaningful variable names.
2. Initialize variables before loops.
3. Use break/continue statements judiciously.
4. Document complex loop logic.